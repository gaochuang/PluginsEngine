@startuml
package reactorFramework {

class Epoll {
    - int epollFd
    + Epoll()
    + ~Epoll()
    + addEvent(Event* Event): bool
    + removeEvent(Event* Event): bool
    + modifyEvent(Event* Event): bool
    + removeEvent(int fd): bool
    + waitEvent(struct epoll_event* eventList, int eventSize, int timeout): int
    - epollCtrl(int operation, int fd, int events): bool
}

class Event {
    + static constexpr int noneEventFlag
    + static constexpr int readEventFlag
    + static constexpr int writeEventFlag
    + static constexpr int errorEventFlag
    - EventLoop* loop
    - int eventFd
    - uint32_t events
    - Callback readCallback
    - Callback writeCallback
    - Callback errorCallback
    - Callback closeCallback
    + Event(EventLoop* loop, int fd)
    + ~Event()
    + getFd() const: int
    + getEvents() const: uint32_t
    + handle(uint32_t revents)
    + removeFromLoop()
    + enableReading(bool isEnable)
    + enableWriting(bool isEnable)
    + enableErrorEvent(bool isEnable)
    + disableAll()
    + isWriting(): bool
    + isReading(): bool
    + setReadCallback(Callback cb)
    + setWriteCallback(Callback cb)
    + setErrorCallback(Callback cb)
    + setCloseCallback(Callback cb)
}

class EventLoop {
    + EventLoop()
    + ~EventLoop()
    + addEvent(std::shared_ptr<Event> event)
    + removeEvent(std::shared_ptr<Event> event)
    + modifyEvent(std::shared_ptr<Event> event)
    + modifyEvent(int fd)
    + removeEvent(int fd)
    + run()
    + stop()
    + runInLoop(const Callback callback)
    + runOnceAfter(const Callback callback, uint32_t interval)
    + runEveryInterval(const Callback callback, uint32_t interval)
    + postCallback(const Callback& callback)
    + postCallback(Callback&& callback)
    + getEventCallbackQueue(): eventCallbackQueue&
    - bool running
    - std::mutex mutex
    - std::shared_ptr<EventCtrl> eventCtrl
    - std::thread::id threadId
    - std::shared_ptr<TimerQueue> timerQueue
    - std::vector<Callback> callbacks
    - std::shared_ptr<eventCallbackQueue> callbackQueue
}

class EventCtrl {
    + EventCtrl(EventLoop* el)
    + ~EventCtrl()
    + addEvent(std::shared_ptr<Event> event)
    + deleteEvent(std::shared_ptr<Event> event)
    + modifyEvent(std::shared_ptr<Event> event)
    + modifyEvent(int fd)
    + deleteEvent(int fd)
    + waitAndRunHandler(int timeMs)
    - static const int activeEventLength
    - std::unordered_map<int, std::weak_ptr<Event>> eventPool
    - Epoll epoll
    - EventLoop* eventLoop
    - std::vector<struct epoll_event> activeEvents
}

class Timer {
    + Timer(uint32_t interval, const TimerCallBack& callback)
    + struct timeval getTimeout()
    + uint64_t getTimeOutMSecond()
    + struct timespec getTimeInterval()
    + static uint64_t getNowTimeMSecond()
    + static std::string getNowTimeDate()
    + update()
    + setHandle(const TimerCallBack&)
    + timerHandle()
    - uint32_t intervalMs
    - struct timeval now
    - TimerCallBack callback
}

class TimerQueue {
    + TimerQueue(EventLoop* eventLoop)
    + ~TimerQueue()
    + addOnceTimer(const Callback& callback, uint32_t interval)
    + runOnceAfter(const Callback& handler, int interval)
    + addRecurringTimer(const Callback& handler, uint32_t interval)
    + runEveryInterval(const Callback& handler, int interval)
    - EventLoop* loop
    - int timerFd
    - std::shared_ptr<Event> event
    - std::mutex mutex
    - std::multimap<uint64_t, std::shared_ptr<Timer>> recurringTimers
    - std::multimap<uint64_t, std::shared_ptr<Timer>> onceTimers
}

class EventFD {
    + EventFD(EventLoop* eventLoop)
    + ~EventFD() = default
    + post(const Callback& callback)
    + post(Callback&& callback)
    - using Callbacks = std::list<Callback>
    - EventLoop* loop
    - int eventFd
    - std::shared_ptr<Event> event
    - std::mutex callbacksMutex
    - Callbacks callbacks
    - createEventFd(): int
    - handleEvents()
    - Callbacks atomicPopAll()
    - executeCallbacks()
    - popAndExecuteFirstCallback(Callbacks& callbacks)
}

class SignalMonitor {
    + SignalMonitor(EventLoop* eventLoop)
    + ~SignalMonitor()
    + add(int signal, const SignalHandler& sh)
    + del(int signal)
    - EventLoop* loop
    - int signalFd
    - std::shared_ptr<Event> event
    - sigset_t mask
    - std::unordered_map<int, SignalHandler> map
    - createSignalFd(): int
    - block(int signal)
    - unblock(int signal)
    - addImpl(int signal, SignalHandler sh)
    - handleSignal()
}

class eventCallbackQueue {
    + virtual void post(const Callback& callback) = 0
    + virtual void post(Callback&& callback) = 0
}

Epoll --> Event
Event --> EventLoop
EventCtrl --> Epoll
EventCtrl --> EventLoop
EventCtrl --> Event
EventLoop --> EventCtrl
EventLoop --> TimerQueue
EventLoop --> eventCallbackQueue
TimerQueue --> EventLoop
TimerQueue --> Timer
EventFD --> EventLoop
EventFD --> Event
SignalMonitor --> EventLoop
SignalMonitor --> Event

}

@enduml
